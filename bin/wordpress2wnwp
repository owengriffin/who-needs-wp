#!/bin/ruby

require 'rubygems'
require 'sequel'
require 'logger'
require 'mysql'
require 'ftools'
require 'choice'

PROGRAM_VERSION=0.1

Choice.options do
  header 'Converts a MySQL Wordpress database to a blog in who-needs-wp format.'
  header ''
  header 'Database options:'
  
  option :host do
    short '-h'
    long '--host=HOST'
    desc 'Hostname or IP of the MySQL server to connect to (default 127.0.0.1)'
    default '127.0.0.1'
  end
  
  option :database do
    short '-d'
    long '--database=DATABASE'
    desc 'Name of the database to use (default wordpress)'
    default 'wordpress'
  end

  option :username do
    short '-u'
    long '--username=USER'
    desc 'Name of the MySQL user to use (default wordpress)'
    default 'wordpress'
  end

  option :password do
    short '-p'
    long '--password=PASSWORD'
    desc 'Password for the MySQL user'
  end

  option :prefix do
    long '--prefix=PREFIX'
    desc 'Prefix for all Wordpress table names'
    default ''
  end

  separator ''
  separator 'Blog options: '

  option :url do
    long '--url=URL'
    desc 'URL for new who-needs-wp blog (used for redirects)'
    default '/'
  end

  separator ''
  separator 'Common options: '
  
  option :help do
    long '--help'
    desc 'Show this message'
  end

  option :version do
    short '-v'
    long '--version'
    desc 'Show version'
    action do
      puts "wordpress2wnwp Wordpress MySQL database converter v#{PROGRAM_VERSION}"
      exit
    end
  end
end

class Wordpress2WNWP
  # Convert a database given the options provided
  def self.convert(options)
    @options = options
    if @options[:prefix].empty?
      @table_name = "wp_posts"
    else
      @table_name = "wp_#{@options[:prefix]}_posts"
    end    
    self.connect
    parents = self.parent_posts
    posts = self.latest_posts(parents)
    self.generate_posts(posts)
    self.generate_rewrites(posts)
  end
  
  # Connect to a MySQL database
  def self.connect
    @database = Mysql.real_connect(@options[:host], @options[:username], @options[:password], @options[:database])
  end

  # Returns a list of parent post identifiers
  def self.parent_posts
    results = @database.query("SELECT DISTINCT post_parent FROM #{@table_name}")
    posts = []
    while row = results.fetch_row do
      posts << row[0]
    end
    return posts
  end

  # Returns the latest post from a given list of parent post identifiers
  def self.latest_posts(parents)
    posts = []
    parents.each do |post_id|
      results = @database.query("SELECT post_title, post_date, post_content FROM #{@table_name} WHERE post_parent = '#{post_id}' ORDER BY ID DESC LIMIT 1")
      row = results.fetch_row
      posts << {
        :id => post_id,
        :title => row[0],
        :date => Date.parse(row[1]),
        :content => row[2]
      }
    end
    return posts
  end

  # Given a list of posts generate the required Markdown files
  def self.generate_posts(posts)
    posts.each do |post|
      directory = "#{post[:date].strftime('%Y')}/#{post[:date].strftime('%m')}/#{post[:date].strftime('%d')}"
      File.makedirs directory
      filename = directory + "/" + post[:title].gsub(/ /, '_')
      post[:filename] = filename + ".html"
      File.open(filename + ".markdown", "w") do |file|
        file.puts post[:content]
      end
    end
  end

  # Generate a list of Apache2 rewrite rules
  def self.generate_rewrites(posts)
    puts "Re-write rules for Apache2:"
    posts.each do |post|
      results = @database.query("SELECT guid FROM #{@table_name} WHERE post_parent='#{post[:id]}'")
      while row = results.fetch_row do
        if row[0] =~ /p=([0-9]+)/
          guid = $1
          puts "RewriteCond %{QUERY_STRING} p=#{guid}"
          puts "RewriteRule ^#{@options[:url]}$ #{@options[:url]}posts/#{post[:filename]} [L]"
        end
      end
    end
  end
end

Wordpress2WNWP::convert(Choice.choices)
